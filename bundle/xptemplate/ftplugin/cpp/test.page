


    /*  -------------"_--------------- */
    /* "`w^"                           */



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2" b

`"WRAPPED_TEXT
WRAPPED_TEXT_line2"^

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    /*  -------------#if--------------- */
    /* #if `0^                          */
    /* `cursor^                         */
    /* #endif                           */



#if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif

#if 0_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif b

`#if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif^

a #if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif


    /*  -------------#ifdef--------------- */
    /* #ifdef `symbol^                     */
    /* `cursor^                            */
    /* #endif `$CL^ `symbol^ `$CR^         */



#ifdef symbol
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol */

#ifdef symbol_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol_TYPED */ b

`#ifdef symbol
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol */^

a #ifdef symbol
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol */


    /*  -------------#ifndef--------------- */
    /* #ifndef `symbol^                     */
    /* `cursor^                             */
    /* #endif `$CL^ `symbol^ `$CR^          */



#ifndef symbol
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol */

#ifndef symbol_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol_TYPED */ b

`#ifndef symbol
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol */^

a #ifndef symbol
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol */


    /*  -------------#inc--------------- */
    /* #include <`^.h>                   */



#include <.h>

#include <_TYPED.h> b

`#include <.h>^

a #include <.h>


    /*  -------------#include_user--------------- */
    /* #include "`me^.h"                          */



#include "test.h"

#include "me_TYPED.h" b

`#include "test.h"^

a #include "test.h"


    /*  -------------#ind--------------- */
    /* #include "`me^.h"                 */



#include "test.h"

#include "me_TYPED.h" b

`#include "test.h"^

a #include "test.h"


    /*  -------------'_--------------- */
    /* '`w^'                           */



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2' b

`'WRAPPED_TEXT
WRAPPED_TEXT_line2'^

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    /*  -------------(_--------------- */
    /* (`w^)                           */



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2) b

`(WRAPPED_TEXT
WRAPPED_TEXT_line2)^

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    /*  -------------<_--------------- */
    /* <`w^>                           */



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2> b

`<WRAPPED_TEXT
WRAPPED_TEXT_line2>^

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    /*  -------------[_--------------- */
    /* [`w^]                           */



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2] b

`[WRAPPED_TEXT
WRAPPED_TEXT_line2]^

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    /*  -------------`_--------------- */
    /* \``w^\`                         */



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2` b

``WRAPPED_TEXT
WRAPPED_TEXT_line2`^

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    /*  -------------all--------------- */
    /* `v^.begin(), `v^.end(), `cursor^ */



v.begin(), v.end(), 

	v_TYPED.begin(), v_TYPED.end(),  b

	`v.begin(), v.end(), ^

	a v.begin(), v.end(), 


    /*  -------------assert---------------              */
    /* assert(`$SParg^`isTrue^,`$SPop^"`text^"`$SParg^) */



	assert( isTrue, "text" )

	assert( isTrue_TYPED, "text_TYPED" ) b

	`assert( isTrue, "text" )^

	a assert( isTrue, "text" )


    /*  -------------Author--------------- */
    /* `$author^                           */



	$author is not set, you need to set g:xptemplate_vars="$author=your_name" in .vimrc

	$author is not set, you need to set g:xptemplate_vars="$author=your_name" in .vimrc b

	`$author is not set, you need to set g:xptemplate_vars="$author=your_name" in .vimrc^

	a $author is not set, you need to set g:xptemplate_vars="$author=your_name" in .vimrc


    /*  -------------call--------------- */
    /* `name^(`$SParg^`param^`$SParg^)   */



name( WRAPPED_TEXT
WRAPPED_TEXT_line2 )

name_TYPED( WRAPPED_TEXT
WRAPPED_TEXT_line2 ) b

`name( WRAPPED_TEXT
WRAPPED_TEXT_line2 )^

a name( WRAPPED_TEXT
WRAPPED_TEXT_line2 )


    /*  -------------case--------------- */
    /* case `constant^`$SPcmd^:          */
    /*     `cursor^                      */
    /*     break;                        */



case constant :
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
	break;

	case constant_TYPED :
		WRAPPED_TEXT
		WRAPPED_TEXT_line2
		break; b

		`case constant :
			WRAPPED_TEXT
			WRAPPED_TEXT_line2
			break;^

			a case constant :
				WRAPPED_TEXT
				WRAPPED_TEXT_line2
				break;


    /*  -------------castop---------------  */
    /* operator `typename^ ();              */
    /*                                      */
    /*                                      */
    /* `className^::operator `typename^ (); */
    /*     { return `cursor^; }             */



				operator typename ();
				
				
				className::operator typename ();
					{ return ; }

					operator typename_TYPED ();
					
					
					className_TYPED::operator typename_TYPED ();
						{ return ; } b

						`operator typename ();
						
						
						className::operator typename ();
							{ return ; }^

							a operator typename ();
							
							
							className::operator typename ();
								{ return ; }


    /*  -------------catch--------------- */
    /* catch ( `except^ )                 */
    /* {                                  */
    /*     `cursor^                       */
    /* }                                  */



								catch ( except )
								{
									
								}

catch ( except_TYPED )
{
	
} b

`catch ( except )
{
	
}^

a catch ( except )
{
	
}


    /*  -------------class---------------                 */
    /* class `className^                                  */
    /* {                                                  */
    /* public:                                            */
    /*     `className^( `ctorParam^ );                    */
    /*     ~`className^();                                */
    /*     `className^( const `className^ &cpy );         */
    /*     `cursor^                                       */
    /* private:                                           */
    /* };                                                 */
    /*                                                    */
    /* `className^::`className^( `ctorParam^ )            */
    /* {                                                  */
    /* }                                                  */
    /*                                                    */
    /* `className^::~`className^()                        */
    /* {                                                  */
    /* }                                                  */
    /*                                                    */
    /* `className^::`className^( const `className^ &cpy ) */
    /* {                                                  */
    /* }                                                  */



class className
{
public:
	className( ctorParam );
	~className();
	className( const className &cpy );
	
private:
};

className::className( ctorParam )
{
}

className::~className()
{
}

className::className( const className &cpy )
{
}

class className_TYPED
{
public:
	className_TYPED( ctorParam_TYPED );
	~className_TYPED();
	className_TYPED( const className_TYPED &cpy );
	
private:
};

className_TYPED::className_TYPED( ctorParam_TYPED )
{
}

className_TYPED::~className_TYPED()
{
}

className_TYPED::className_TYPED( const className_TYPED &cpy )
{
} b

`class className
{
public:
	className( ctorParam );
	~className();
	className( const className &cpy );
	
private:
};

className::className( ctorParam )
{
}

className::~className()
{
}

className::className( const className &cpy )
{
}^

a class className
{
public:
	className( ctorParam );
	~className();
	className( const className &cpy );
	
private:
};

className::className( ctorParam )
{
}

className::~className()
{
}

className::className( const className &cpy )
{
}


    /*  -------------comment--------------- */
    /* `$CS `cursor^                        */



// WRAPPED_TEXT
// WRAPPED_TEXT_line2

// WRAPPED_TEXT
// WRAPPED_TEXT_line2 b

`// WRAPPED_TEXT
 // WRAPPED_TEXT_line2^

a // WRAPPED_TEXT
  // WRAPPED_TEXT_line2


    /*  -------------commentBlock--------------- */
    /* `$CS `cursor^                             */



// WRAPPED_TEXT
// WRAPPED_TEXT_line2

// WRAPPED_TEXT
// WRAPPED_TEXT_line2 b

`// WRAPPED_TEXT
 // WRAPPED_TEXT_line2^

a // WRAPPED_TEXT
  // WRAPPED_TEXT_line2


    /*  -------------commentDoc--------------- */
    /* `$CL^`$CM^                              */
    /* `$_xCommentMidIndent$CM `cursor^        */
    /* `$_xCommentMidIndent$CR^                */



/**
 * WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */

/**
 * WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */ b

`/**
 * WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */^

a /**
 * WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */


    /*  -------------commentLine--------------- */
    /* `$CS `cursor^                            */



// WRAPPED_TEXT
// WRAPPED_TEXT_line2

// WRAPPED_TEXT
// WRAPPED_TEXT_line2 b

`// WRAPPED_TEXT
 // WRAPPED_TEXT_line2^

a // WRAPPED_TEXT
  // WRAPPED_TEXT_line2


    /*  -------------commentLine2--------------- */
    /* `$CL `what` $CR^`^                        */



/* WRAPPED_TEXT */
/* WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT */
/* WRAPPED_TEXT_line2 */ b

`/* WRAPPED_TEXT */
 /* WRAPPED_TEXT_line2 */^

 a /* WRAPPED_TEXT */
   /* WRAPPED_TEXT_line2 */


    /*  -------------default--------------- */
    /* default:                             */
    /*     `cursor^                         */



 default:
	 

 default:
	  b

	  `default:
		  ^

		  a default:
			  


    /*  -------------do---------------                       */
    /* do`$BRloop^{                                          */
    /*     `cursor^                                          */
    /* }`$BRloop^while`$SPcmd^(`$SParg^`condition^`$SParg^); */



do
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
while ( condition );

do
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
while ( condition_TYPED ); b

`do
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
while ( condition );^

a do
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
while ( condition );


    /*  -------------elif--------------- */
    /* else `Include:_if^                */



else if ( condition )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

else if ( condition_TYPED )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`else if ( condition )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a else if ( condition )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------else--------------- */
    /* else`$BRif^{                      */
    /*     `cursor^                      */
    /* }                                 */



else
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

else
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`else
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a else
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------Email--------------- */
    /* `$email^                           */



$email is not set, you need to set g:xptemplate_vars="$email=your_email@com" in .vimrc

$email is not set, you need to set g:xptemplate_vars="$email=your_email@com" in .vimrc b

`$email is not set, you need to set g:xptemplate_vars="$email=your_email@com" in .vimrc^

a $email is not set, you need to set g:xptemplate_vars="$email=your_email@com" in .vimrc


    /*  -------------enum--------------- */
    /* enum `name^`$BRstc^{              */
    /*     `^                            */
    /* }                                 */



enum name
{
	
}

enum name_TYPED
{
	_TYPED
} b

`enum name
{
	
}^

a enum name
{
	
}


    /*  -------------externc--------------- */
    /* #ifdef __cplusplus                   */
    /* extern "C" {                         */
    /* #endif                               */
    /* `cursor^                             */
    /* #ifdef __cplusplus                   */
    /* }                                    */
    /* #endif                               */



#ifdef __cplusplus
extern "C" {
#endif
WRAPPED_TEXT
WRAPPED_TEXT_line2
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
WRAPPED_TEXT
WRAPPED_TEXT_line2
#ifdef __cplusplus
}
#endif b

`#ifdef __cplusplus
extern "C" {
#endif
WRAPPED_TEXT
WRAPPED_TEXT_line2
#ifdef __cplusplus
}
#endif^

a #ifdef __cplusplus
extern "C" {
#endif
WRAPPED_TEXT
WRAPPED_TEXT_line2
#ifdef __cplusplus
}
#endif


    /*  -------------fcomment--------------- */
    /* _CMT_*                                */
    /*  * @author : `$author^ | `$email^     */
    /*  * @description                       */
    /*  *     `cursor^                       */
    /*  * @return {`int^} `desc^             */
    /*  _cmt_                                */



/**
 * @author : $author is not set, you need to set g:xptemplate_vars="$author=your_name" in .vimrc | $email is not set, you need to set g:xptemplate_vars="$email=your_email@com" in .vimrc
 * @description
 *     
 * @return {int} desc
 */

/**
 * @author : $author is not set, you need to set g:xptemplate_vars="$author=your_name" in .vimrc | $email is not set, you need to set g:xptemplate_vars="$email=your_email@com" in .vimrc
 * @description
 *     
 * @return {int_TYPED} desc_TYPED
 */ b

`/**
 * @author : $author is not set, you need to set g:xptemplate_vars="$author=your_name" in .vimrc | $email is not set, you need to set g:xptemplate_vars="$email=your_email@com" in .vimrc
 * @description
 *     
 * @return {int} desc
 */^

a /**
 * @author : $author is not set, you need to set g:xptemplate_vars="$author=your_name" in .vimrc | $email is not set, you need to set g:xptemplate_vars="$email=your_email@com" in .vimrc
 * @description
 *     
 * @return {int} desc
 */


    /*  -------------File--------------- */
    /* `file()^                          */



test.page

test.page b

`test.page^

a test.page


    /*  -------------filehead---------------                                  */
    /* _CMT_*-------------------------/// `sum^ \\\--------------------------- */
    /*  *                                                                     */
    /*  * <b>`function^</b>                                                   */
    /*  * @version : `1.0^                                                    */
    /*  * @since : `strftime("%Y %b %d")^                                     */
    /*  *                                                                     */
    /*  * @description :                                                      */
    /*  *     `cursor^                                                        */
    /*  * @usage :                                                            */
    /*  *                                                                     */
    /*  * @author : `$author^ | `$email^                                      */
    /*  * @copyright `.com.cn^                                                */
    /*  * @TODO :                                                             */
    /*  *                                                                     */
    /*  *--------------------------\\\ `sum^ ///---------------------------_cmt_ */



/**-------------------------/// sum \\\---------------------------
 *
 * <b>function</b>
 * @version : 1.0
 * @since : 2009 Oct 08
 *
 * @description :
 *     
 * @usage :
 *
 * @author : $author is not set, you need to set g:xptemplate_vars="$author=your_name" in .vimrc | $email is not set, you need to set g:xptemplate_vars="$email=your_email@com" in .vimrc
 * @copyright .com.cn
 * @TODO :
 *
 *--------------------------\\\ sum ///---------------------------*/


/**-------------------------/// sum_TYPED \\\---------------------------
 *
 * <b>function_TYPED</b>
 * @version : 10_TYPED
 * @since : 2009 Oct 08
 *
 * @description :
 *     
 * @usage :
 *
 * @author : $author is not set, you need to set g:xptemplate_vars="$author=your_name" in .vimrc | $email is not set, you need to set g:xptemplate_vars="$email=your_email@com" in .vimrc
 * @copyright comcn_TYPED
 * @TODO :
 *
 *--------------------------\\\ sum_TYPED ///---------------------------*/
 b

 `/**-------------------------/// sum \\\---------------------------
  *
  * <b>function</b>
  * @version : 1.0
  * @since : 2009 Oct 08
  *
  * @description :
  *     
  * @usage :
  *
  * @author : $author is not set, you need to set g:xptemplate_vars="$author=your_name" in .vimrc | $email is not set, you need to set g:xptemplate_vars="$email=your_email@com" in .vimrc
  * @copyright .com.cn
  * @TODO :
  *
  *--------------------------\\\ sum ///---------------------------*/
 ^

 a /**-------------------------/// sum \\\---------------------------
  *
  * <b>function</b>
  * @version : 1.0
  * @since : 2009 Oct 08
  *
  * @description :
  *     
  * @usage :
  *
  * @author : $author is not set, you need to set g:xptemplate_vars="$author=your_name" in .vimrc | $email is not set, you need to set g:xptemplate_vars="$email=your_email@com" in .vimrc
  * @copyright .com.cn
  * @TODO :
  *
  *--------------------------\\\ sum ///---------------------------*/
 


    /*  -------------for---------------                                                                   */
    /* for`$SPcmd^(`$SParg^`int^ `i^`$SPop^=`$SPop^`0^; `i^`$SPop^<`$SPop^`len^; ++`i^`$SParg^)`$BRloop^{ */
    /*     `cursor^                                                                                       */
    /* }                                                                                                  */



 for ( int i = 0; i < len; ++i )
 {
	 
 }

for ( int_TYPED i_TYPED = 0_TYPED; i_TYPED < len_TYPED; ++i_TYPED )
{
	
} b

`for ( int i = 0; i < len; ++i )
{
	
}^

a for ( int i = 0; i < len; ++i )
{
	
}


    /*  -------------forever--------------- */
    /* for`$SPcmd^(;;) `cursor^             */



for (;;) 

for (;;)  b

`for (;;) ^

a for (;;) 


    /*  -------------fornn---------------                                                                                                */
    /* for`$SPcmd^(`$SParg^`$FOR_SCOPE^`$VAR_PRE`ptr^`$SPop^=`$SPop^`init^; `$NULL^`$SPop^!=`$SPop^`ptr^; `^R('ptr')^`$SParg^)`$BRloop^{ */
    /*     `cursor^                                                                                                                      */
    /* }                                                                                                                                 */



for ( ptr = init; NULL != ptr; ptr )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

for ( ptr_TYPED = init_TYPED; NULL != ptr_TYPED; _TYPED )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`for ( ptr = init; NULL != ptr; ptr )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a for ( ptr = init; NULL != ptr; ptr )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------forr---------------                                                                     */
    /* for`$SPcmd^(`$SParg^`int^ `i^`$SPop^=`$SPop^`n^; `i^`$SPop^>`=^`$SPop^`end^; --`i^`$SParg^)`$BRloop^{ */
    /*     `cursor^                                                                                          */
    /* }                                                                                                     */



for ( int i = n; i >= end; --i )
{
	
}

for ( int_TYPED i_TYPED = n_TYPED; i_TYPED >_TYPED end_TYPED; --i_TYPED )
{
	
} b

`for ( int i = n; i >= end; --i )
{
	
}^

a for ( int i = n; i >= end; --i )
{
	
}


    /*  -------------fprintf---------------                     */
    /* fprintf(`$SParg^`stream^,`$SPop^`:_printfElts:^`$SParg^) */



fprintf( stream, "pattern" )

fprintf( stream_TYPED, "pattern_TYPED" ) b

`fprintf( stream, "pattern" )^

a fprintf( stream, "pattern" )


    /*  -------------fun---------------                                                       */
    /* `c_fun_type_indent()^`int^`c_fun_body_indent()^`name^(`$SParg`param?`$SParg^)`$BRfun^{ */
    /*     `cursor^                                                                           */
    /* }                                                                                      */



	int
name()
{
	
}

	int_TYPED
name_TYPED( param_TYPED )
{
	
} b

`	int
name()
{
	
}^

a 	int
name()
{
	
}


    /*  -------------functor---------------                            */
    /* struct `className^                                              */
    /* {                                                               */
    /*     `closure...{{^`type^  `what^;                               */
    /*     `_^R('className')^( `type^ n`what^ ) : `what^( n`what^ ) {} */
    /*                                                                 */
    /*     `}}^`outType^   operator() ( `params^ )                     */
    /*     {                                                           */
    /*         `cursor^                                                */
    /*     }                                                           */
    /* };                                                              */



struct className
{
	type  what;
	className( type nwhat ) : what( nwhat ) {}

	outType   operator() ( params )
	{
		/* cursor */
	}
};
